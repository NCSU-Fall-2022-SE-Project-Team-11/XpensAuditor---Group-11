plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.xa.xpensauditor'
    compileSdk 32

    defaultConfig {
        applicationId "com.xa.xpensauditor"
        minSdk 26
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        exclude '**res/anim/*'
        exclude '**res/animator/*'
        exclude '**res/color/*'
        exclude '**res/drawable/*'
        exclude '**res/interpolator/*'
        exclude '**res/layout/*'
        exclude 'resources.arsc'
        exclude 'AndroidManifest.xml'
    }
}

dependencies {
    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-fragment:2.4.1'
    implementation 'androidx.navigation:navigation-ui:2.4.1'
    implementation 'com.mailjet:mailjet-client:5.2.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0-alpha07'
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    implementation platform('com.google.firebase:firebase-bom:30.4.1')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth:21.0.8'
    implementation "com.firebaseui:firebase-ui-auth:8.0.2"
    implementation 'com.google.firebase:firebase-database:20.0.6'
    implementation 'com.google.firebase:firebase-core:21.1.1'
    implementation 'com.firebase:firebase-client-android:2.4.0'
    implementation 'com.google.firebase:firebase-storage:20.0.2'
    implementation "androidx.drawerlayout:drawerlayout:1.1.1"
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation files('library/android.jar')
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.github.AnyChart:AnyChart-Android:1.1.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4-alpha07'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.0-alpha07'
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacocoVersion"
    reportsDirectory = file("$buildDir/reports/coverage")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoAllCombinedTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled true
        html.enabled true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}

android.applicationVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."

        source = variant.javaCompile.source
        destinationDir = file("$rootDir/docs/")
        failOnError false

        doFirst {
            ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files('library/mailjet-client-5.2.1.jar')

            options.addStringOption "-show-members", "package"
            // more doclet options here...

            options.links "https://developer.android.com/reference/"
        }
    }
}